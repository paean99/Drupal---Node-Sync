<?php
/**
 * @file
 * Main module file.
 *
 */

/**
 * Implements hook_node_insert().
 *
 * @param object $node
 */
function node_sync_node_insert($node) {
  node_sync_node_insert_or_update($node, 'insert');
}

/**
 * Implements hook_node_update().
 *
 * @param object $node
 */
function node_sync_node_update($node) {
  node_sync_node_insert_or_update($node, 'update');
}

/**
 * Manage node insert & update.
 *
 * @param object $node
 * @param string $action
 */
function node_sync_node_insert_or_update($node, $action) {

  // Get node sync configuration.
  $source_field = variable_get('node_sync_' . $node->type . '_source_field', NULL);
  $fields_to_sync = variable_get('node_sync_' . $node->type . '_fields_to_apply', array());
  // List of all node types.
  $node_types = node_type_get_types();

  // Synced node; sync form source.
  if (!empty($source_field)) {
    $Node = entity_metadata_wrapper('node', $node);
    $node_sync_nid = isset($Node->$source_field) ? $Node->$source_field->raw() : NULL;

    // Check if node must be synced (not empty value of sync field).
    if (!empty($node_sync_nid)) {
      node_sync_node_sync($node, $Node->$source_field->value(), $fields_to_sync);
    }
    // Otherwhise check if this node is the sync node of others.
    else {
      node_sync_sync_nodes($node, $source_field, $fields_to_sync);
    }
  }
  // Source node; sync all referencing nodes.
  else {
    foreach ($node_types as $node_type => $node_type_value) {
      $source_field = variable_get('node_sync_' . $node_type . '_source_field', NULL);
      $fields_to_sync = variable_get('node_sync_' . $node_type . '_fields_to_apply', array());

      if (!empty($source_field) && !empty($fields_to_sync)) {
        node_sync_sync_nodes($node, $source_field, $fields_to_sync);
      }
    }
  }
}

/**
 * Sync node fields.
 *
 * @param object $node
 *   Node to be updated.
 * @param object $source_node
 *   Source node.
 * @param array $fields_to_sync
 *   Fields to be synced.
 * @param boolean $clear_cache
 *   Set TRUE to clear cache after saving.
 */
function node_sync_node_sync($node, $source_node, $fields_to_sync = array(), $clear_cache = FALSE) {

  // get the configuration of the node like the revision settings on the $node object
  node_object_prepare($node);

  // Override field values.
  foreach ($fields_to_sync as $fid) {
    if (isset($node->$fid) && isset($source_node->$fid)) {
      $node->$fid = $source_node->$fid;
    }
  }

  // Save. @NOTE Using node_save can produce an infinite loop and
  // field_attach_update() do not respect revisions
  node_sync_revision_sync($node);

  if ($clear_cache) {
    // Clear the static loading cache.
    entity_get_controller('node')->resetCache(array($node->nid));
  }
}

/**
 * Sync all nodes referencing to $node using field $source_field.
 *
 * @param object $node
 * @param object $source_field
 * @param array $fields_to_sync
 */
function node_sync_sync_nodes($node, $source_field, $fields_to_sync) {
  $nids = node_sync_get_nodes_to_sync($node, $source_field);

  foreach ($nids as $nid) {
    node_sync_node_sync(node_load($nid), $node, $fields_to_sync, TRUE);
  }
}


/**
 * Saves changes to a node or/and its revisions.
 * An edited copy of node_save()
 *
 * @param object $node
 *   The $node object to be saved.
 */
function  node_sync_revision_sync($node) {
  $transaction = db_transaction();

  try {
    // Load the stored entity, if any.
    if (!empty($node->nid) && !isset($node->original)) {
      $node->original = entity_load_unchanged('node', $node->nid);
    }

    global $user;

    // Set the timestamp fields.
    if (empty($node->created)) {
      $node->created = REQUEST_TIME;
    }
    // The changed timestamp is always updated for bookkeeping purposes,
    // for example: revisions, searching, etc.
    $node->changed = REQUEST_TIME;

    $node->timestamp = REQUEST_TIME;
    $update_node = TRUE;

    // Let modules modify the node before it is saved to the database.
    // uses edited version of module_invoke_all()
    node_sync_mod_inv_all('node_presave', $node);
    node_sync_mod_inv_all('entity_presave', $node, 'node');

    // When saving a new node revision, unset any existing $node->vid so as to
    // ensure that a new revision will actually be created, then store the old
    // revision ID in a separate property for use by node hook implementations.
    if (!empty($node->revision) && $node->vid) {
      unset($node->vid);
    }

    // Save the node and node revision.

    // For existing nodes, update the node record which matches the value of
    // $node->nid.
    drupal_write_record('node', $node, 'nid');
    // Then, if a new node revision was requested, save a new record for
    // that; otherwise, update the node revision record which matches the
    // value of $node->vid.
    if (!empty($node->revision)) {
      _node_save_revision($node, $user->uid);
    }
    else {
      _node_save_revision($node, $user->uid, 'vid');
      $update_node = FALSE;
    }
    $op = 'update';

    if ($update_node) {
      db_update('node')
        ->fields(array('vid' => $node->vid))
        ->condition('nid', $node->nid)
        ->execute();
    }

    // Call the node specific callback (if any). This can be
    // node_invoke($node, 'insert') or
    // node_invoke($node, 'update').
    node_invoke($node, $op);

    // Save fields.
    $function = "field_attach_$op";
    $function('node', $node);

    // call an edited version of module_invoke_all()
    node_sync_mod_inv_all('node_' . $op, $node);
    node_sync_mod_inv_all('entity_' . $op, $node, 'node');

    // Update the node access table for this node.
    // TODO node_sync: delete. Probably not needed here. Unless revisions...
    node_access_acquire_grants($node);

    // Clear internal properties.
    unset($node->original);

    // Ignore slave server temporarily to give time for the
    // saved node to be propagated to the slave.
    db_ignore_slave();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('node', $e);
    throw $e;
  }
}


/**
 * Overrides module_invoke_all() to avoid infinite recursion
 *
 * @param $hook
 *   The name of the hook to invoke.
 * @param ...
 *   Arguments to pass to the hook.
 *
 * @return array
 *   An array of return values of the hook implementations. If modules return
 *   arrays from their implementations, those are merged into one array
 *   recursively. Note: integer keys in arrays will be lost, as the merge is
 *   done using array_merge_recursive().
 *
 */
function node_sync_mod_inv_all($hook) {
  $args = func_get_args();
  // Remove $hook from the arguments.
  unset($args[0]);
  $return = array();
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      if ($module != 'node_sync'){
        $result = call_user_func_array($function, $args);
      }

      if (isset($result) && is_array($result)) {
        $return = array_merge_recursive($return, $result);
      }
      elseif (isset($result)) {
        $return[] = $result;
      }
    }
  }

  return $return;
}


/**
 * Get all nodes refering to node through field.
 *
 * @param object $node
 * @param object $source_field
 * @return array
 */
function node_sync_get_nodes_to_sync($node, $source_field) {

  $nids = array();
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node', '=')
    ->fieldCondition($source_field, 'target_id', $node->nid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
  }

  return $nids;
}

function node_sync_permission() {
  return array(
    'administer node sync' => array(
      'title' => t('Administer node sync'),
      'description' => t('Perform administration tasks for node sync.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function node_sync_menu() {
  $items = array();
  $items['admin/structure/node-sync'] = array(
    'title' => 'Settings',
    'access callback' => 'user_access',
    'access arguments' => array('administer node sync'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_sync_settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;
}


/**
 * Settings form.
 *
 * @param array $form
 * @param array $form_state
 * @return array
 */
function node_sync_settings($form, &$form_state) {

  $form = array();
  $node_types = node_type_get_types();

  foreach ($node_types as $node_type => $node_type_value) {
    $fields = field_info_instances('node', $node_type);
    $field_options = array();
    $reference_options = array();
    $reference_target = array();

    // using only $field in the foreach since $fid of
    // 'foreach ($fields as $fid => $field_value)'
    // returns empty in field_info_field
    // for ['settings']['handler_settings']['target_bundles']
    // and it is also accessible by $field['label']
    foreach ($fields as $field) {
      if ($field['display']['default']['module'] == 'entityreference') {
        $info = field_info_field($field['field_name']);

        $reference_options[$field['field_name']] = $field['label'];
        $reference_target[$field['field_name']] = $info['settings']['handler_settings']['target_bundles'];
      }
      $field_options[$field['field_name']] = $field['label'];
    }

    $form['node_sync_' . $node_type] = array(
      '#type' => 'fieldset',
      '#title' => $node_type_value->name,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('IMPORTANT: Selected fields values will be overriden using the source node if active.'),
    );

    $form['node_sync_' . $node_type]['node_sync_' . $node_type . '_source_field'] = array(
      '#type' => 'select',
      '#title' => t('Source field to define sync node'),
      '#options' => $reference_options,
      '#empty_option' => '-' . t('None') . '-',
      '#default_value' => variable_get('node_sync_' . $node_type . '_source_field'),
      '#description' => t('Define "entityreference" field wich is going to have the node reference to take all field values and sync.'),
      '#ajax' => array(
        'callback' => 'node_sync_sync_node_bundle_ajax',
        'wrapper' => 'node_sync_sync_node_bundle' . $node_type,
        // the parameters in the AJAX callback don't seem to be documented anywhere...
        'parameters'=>array('$node_type' => $node_type, '$reference_target' => $reference_target ),
      ),
    );

    // Form control that will be replaced by the AJAX call. It is targeted by the html id in the #prefix
    $form['node_sync_' . $node_type]['node_sync_' . $node_type . '_sync_node_type'] = array(
      '#prefix' => '<div id="node_sync_sync_node_bundle' . $node_type . '" >' . $bundle = !empty(variable_get('node_sync_' . $node_type . '_source_field'))
          ? 'The Field: "' . variable_get('node_sync_' . $node_type . '_source_field') . '" is referencing the Bundle(s): "' . implode(', ', $reference_target[variable_get('node_sync_' . $node_type . '_source_field')]) . '"' : 'No Bundle are referenced',
      '#suffix' => '</div>',
    );

    $form['node_sync_' . $node_type]['node_sync_' . $node_type . '_fields_to_apply'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Fields to sync'),
      '#options' => $field_options,
      '#disabled' => !empty($reference_options) ? FALSE : TRUE,
      '#default_value' => variable_get('node_sync_' . $node_type . '_fields_to_apply', array()),
      '#description' => t('Define fields to sync. IMPORTANT; Prevent to select same as source.'),
    );
  }

  return system_settings_form($form);
}


/**
 * AJAX callback for Bundle of sync node.
 */
function node_sync_sync_node_bundle_ajax($form, $form_state) {
  $node_type = $form_state['triggering_element']['#ajax']['parameters']['$node_type'];
  $reference_target = $form_state['triggering_element']['#ajax']['parameters']['$reference_target'];
  $bundle = !empty($form_state['values']['node_sync_' . $node_type . '_source_field'])
    ? 'The Field: "' . $form_state['values']['node_sync_' . $node_type . '_source_field'] . '" is referencing the Bundle(s): "' . implode(', ', $reference_target[$form_state['triggering_element']['#value']]) . '"' : 'No Bundle are referenced';
  // Do not forget to maintain the html id in this callback or it will be replaced
  // and will endup working only once
  $markup = '<div id="node_sync_sync_node_bundle' . $node_type . '" >' . $bundle . '</div>';
  return $markup;
}


/**
 * Implementes hook_form_node_form_alter().
 *
 * @param array $form
 * @param array $form_state
 * @return array
 */
function node_sync_form_node_form_alter(&$form, $form_state) {

  // Show message.
  $node = $form['#node'];
  $config_access = user_access('administer node sync');

  // Get node sync configuration.
  $source_field = variable_get('node_sync_' . $node->type . '_source_field', NULL);
  $fields_to_sync = variable_get('node_sync_' . $node->type . '_fields_to_apply', array());
  $fields_to_sync = array_filter($fields_to_sync);
  $fields_to_sync_list = array();

  // Just run if needed.
  if (!empty($source_field) && !empty($fields_to_sync)) {
    foreach ($fields_to_sync as $field_name) {
      $info = field_info_instance('node', $field_name, $node->type);
      $fields_to_sync_list[] = $info['label'] . ' (' . $field_name . ')';
    }

    $info = field_info_instance('node', $source_field, $node->type);
    $source_field_message = $info['label'] . ' (' . $source_field . ')';

    $message = t('These fields are synced using field "@source": "@fields". !config (Just if @source is not empty).', array(
      '@source' => $source_field_message,
      '@fields' => implode(', ', $fields_to_sync_list),
      '!config' => $config_access ?
        l('Config here.', '/admin/structure/node-sync', array('attributes' => array('target' => '_blank'))) : ''
    ));

    drupal_set_message($message, 'status');
  }
}
