<?php
/**
 * @file
 * Main module file.
 *
 */

/**
 * Implements hook_node_insert().
 */
function node_sync_node_insert($node) {
  node_sync_node_insert_or_update($node, 'insert');
}

/**
 * Implements hook_node_update().
 */
function node_sync_node_update($node) {
  node_sync_node_insert_or_update($node, 'update');
}

/**
 * Manage node insert & update.
 *
 * @param object $node
 * @param string $action
 */
function node_sync_node_insert_or_update($node, $action) {

  // Get node sync configuration.
  $source_field = variable_get('node_sync_' . $node->type . '_source_field', NULL);
  $fields_to_sync = variable_get('node_sync_' . $node->type . '_fields_to_apply', array());

  // Just run if needed.
  if (!empty($source_field) && !empty($fields_to_sync)) {
    $Node = entity_metadata_wrapper('node', $node);
    $node_sync_nid = isset($Node->$source_field) ? $Node->$source_field->raw() : NULL;

    // Check if node must be synced (not empty value of sync field).
    if (!empty($node_sync_nid)) {
      node_sync_node_sync($node, $Node->$source_field->value(), $fields_to_sync);
    }
    // Otherwhise check if this node is the sync node of others.
    else {
      node_sync_sync_nodes($node, $source_field, $fields_to_sync);
    }
  }
}

/**
 * Sync node fields.
 *
 * @param object $node
 *   Node to be updated.
 * @param int $source_node
 *   Source node.
 * @param array $fields_to_sync
 *   Fields to be synced.
 * @param boolean $clear_cache
 *   Set TRUE to clear cache after saving.
 */
function node_sync_node_sync($node, $source_node, $fields_to_sync = array(), $clear_cache = FALSE) {

  // Override field values.
  foreach ($fields_to_sync as $fid) {
    if (isset($node->$fid) && isset($source_node->$fid)) {
      $node->$fid = $source_node->$fid;
    }
  }

  // Save. @NOTE Using node_save can produce an infinite loop.
  field_attach_update('node', $node);

  if ($clear_cache) {
    // Clear the static loading cache.
    entity_get_controller('node')->resetCache(array($node->nid));
  }
}

/**
 * Sync all nodes referencing to $node using field $source_field.
 *
 * @param object $node
 * @param int $source_field
 * @param array $fields_to_sync
 */
function node_sync_sync_nodes($node, $source_field, $fields_to_sync) {
  $nids = node_sync_get_nodes_to_sync($node, $source_field);

  foreach ($nids as $nid) {
    node_sync_node_sync(node_load($nid), $node, $fields_to_sync, TRUE);
  }
}

/**
 * Get all nodes refering to node through field.
 *
 * @param object $node
 * @param int $source_field
 * @return array
 */
function node_sync_get_nodes_to_sync($node, $source_field) {

  $nids = array();
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node', '=')
    ->propertyCondition('type', $node->type, '=')
    ->fieldCondition($source_field, 'target_id', $node->nid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
  }

  return $nids;
}

function node_sync_permission() {
  return array(
    'administer node sync' => array(
      'title' => t('Administer node sync'),
      'description' => t('Perform administration tasks for node sync.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function node_sync_menu() {
  $items = array();
  $items['admin/structure/node-sync'] = array(
    'title' => 'Settings',
    'access callback' => 'user_access',
    'access arguments' => array('administer node sync'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_sync_settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;
}


/**
 * Settings form.
 */
function node_sync_settings($form, &$form_state) {

  $form = array();
  $node_types = node_type_get_types();

  foreach ($node_types as $node_type => $node_type_value) {
    $fields = field_info_instances('node', $node_type);
    $field_options = array();
    $reference_options = array();

    foreach ($fields as $fid => $field_value) {
      $info = field_info_field($fid);
      if ($info['type'] == 'entityreference') {
        $reference_options[$fid] = $field_value['label'];
      }
      $field_options[$fid] = $field_value['label'];
    }

    $form['node_sync_' . $node_type] = array(
      '#type' => 'fieldset',
      '#title' => $node_type_value->name,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('IMPORTANT: Selected fields values will be overriden using the source node if active.'),
    );

    $form['node_sync_' . $node_type]['node_sync_' . $node_type . '_source_field'] = array(
      '#type' => 'select',
      '#title' => t('Source field to define sync node'),
      '#options' => $reference_options,
      '#empty_option' => '-' . t('None') . '-',
      '#default_value' => variable_get('node_sync_' . $node_type . '_source_field'),
      '#description' => t('Define "entityreference" field wich is going to have the node reference to take all field values and sync.'),
    );

    $form['node_sync_' . $node_type]['node_sync_' . $node_type . '_fields_to_apply'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Fields to sync'),
      '#options' => $field_options,
      '#disabled' => !empty($reference_options) ? FALSE : TRUE,
      '#default_value' => variable_get('node_sync_' . $node_type . '_fields_to_apply', array()),
      '#description' => t('Define fields to sync. IMPORTANT; Prevent to select same as source.'),
    );
  }

  return system_settings_form($form);
}

/**
 * Implementes hook_form_node_form_alter().
 */
function node_sync_form_node_form_alter(&$form, $form_state) {

  // Show message.
  $node = $form['#node'];
  $config_access = user_access('administer node sync');

  // Get node sync configuration.
  $source_field = variable_get('node_sync_' . $node->type . '_source_field', NULL);
  $fields_to_sync = variable_get('node_sync_' . $node->type . '_fields_to_apply', array());
  $fields_to_sync = array_filter($fields_to_sync);
  $fields_to_sync_list = array();

  // Just run if needed.
  if (!empty($source_field) && !empty($fields_to_sync)) {
    foreach ($fields_to_sync as $field_name) {
      $info = field_info_instance('node', $field_name, $node->type);
      $fields_to_sync_list[] = $info['label'] . ' (' . $field_name . ')';
    }

    $info = field_info_instance('node', $source_field, $node->type);
    $source_field_message = $info['label'] . ' (' . $source_field . ')';

    $message = t('These fields are synced using field "@source": "@fields". !config (Just if @source is not empty).', array(
      '@source' => $source_field_message,
      '@fields' => implode(', ', $fields_to_sync_list),
      '!config' => $config_access ?
        l('Config here.', '/admin/structure/node-sync', array('attributes' => array('target' => '_blank'))) : ''
    ));

    drupal_set_message($message, 'status');
  }
}
